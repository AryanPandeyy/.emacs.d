* Package Manager
#+BEGIN_SRC elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
#+END_SRC
* Appearance
#+BEGIN_SRC elisp
  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (fringe-mode -1)
  (scroll-bar-mode -1)
  (global-subword-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*Themes
#+BEGIN_SRC elisp
  (use-package ef-themes
    :straight t
    :if window-system
    :ensure t)
  (use-package doom-themes
    :straight t
    :ensure t)
  (load-theme 'ef-light t)
  (add-to-list 'load-path "~/.emacs.d/nano-emacs/")
#+END_SRC

#+BEGIN_SRC elisp
  (add-to-list 'default-frame-alist
	       '(font . "JetBrains Mono-14"))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package hungry-delete
    :straight t
    :ensure t
    :defer t
    :config (global-hungry-delete-mode))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package mood-line
    :straight t
    :ensure t)
#+END_SRC

* Vertico
#+BEGIN_SRC elisp
  (use-package vertico
    ;; :commands vertico-mode
    :straight t
    :after minibuffer
    :commands vertico-mode
    :init (vertico-mode 1)
    :config
    (setq vertico-count 10
	  vertico-cycle t
	  vertico-resize t)
    (advice-add #'tmm-add-prompt :after #'minibuffer-hide-completions)
    (advice-add #'ffap-menu-ask :around
		(lambda (&rest args)
		  (cl-letf (((symbol-function #'minibuffer-completion-help)
			     #'ignore))
		    (apply args)))))

  (use-package vertico-repeat
    :after vertico
    :hook (minibuffer-setup . vertico-repeat-save)
    :config
    (use-package savehist
      :defer
      :config
      (add-to-list 'savehist-additional-variables
		   'vertico-repeat-history)))

  (use-package vertico-reverse
    ;; :disabled
    :after vertico)

  (use-package vertico-buffer
    :after vertico
    :config
    (setq vertico-buffer-display-action 'display-buffer-reuse-window))
#+END_SRC

* Marginalia
#+BEGIN_SRC elisp
  (use-package marginalia
    :straight t
    :init (marginalia-mode 1))
#+END_SRC

* Orderless
#+BEGIN_SRC elisp
    ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :straight t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

* Eglot
#+BEGIN_SRC elisp
  (require 'eglot)
  (fset #'jsonrpc--log-event #'ignore)
  (add-hook 'tsx-ts-mode-hook 'eglot-ensure)
  (add-hook 'java-ts-mode-hook 'eglot-ensure)
  (set-default 'indent-tabs-mode nil)
  (use-package apheleia
    :straight t)
  (apheleia-global-mode t)
  ;; https://www.leemeichin.com/posts/my-emacs-config.html
  (use-package asdf
    :straight (:type git :host github :repo "tabfugnic/asdf.el"))
  (require 'asdf)
  (asdf-enable)
#+END_SRC 

* Corfu
#+BEGIN_SRC elisp
  (use-package corfu
    :straight t
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))
#+END_SRC

* Typescript
#+BEGIN_SRC elisp
   (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . tsx-ts-mode))
#+END_SRC

* Flymake eslint
#+BEGIN_SRC elisp
  (use-package flymake-eslint
    :straight t)
  (add-hook 'tsx-ts-mode-hook ; or whatever the mode-hook is for your mode of choice
  (lambda ()
    (flymake-eslint-enable)))
#+END_SRC

* Treesitter
#+BEGIN_SRC elisp
  (require 'treesit)
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (ansi-color-apply-on-region compilation-filter-start (point-max)))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

* Dape
#+BEGIN_SRC elisp
  (use-package dape
    :straight t)
#+END_SRC

* Flycheck
#+BEGIN_SRC elisp
#+END_SRC

* Projectile
#+BEGIN_SRC elisp
  (use-package ripgrep
    :straight t)
  (use-package rg
    :straight t)
  (use-package projectile
    :straight t
    :ensure t)
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
