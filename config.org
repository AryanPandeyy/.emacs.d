* Package Manager
#+BEGIN_SRC elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
#+END_SRC
* Appearance
#+BEGIN_SRC elisp
  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (fringe-mode -1)
  (scroll-bar-mode -1)
  (global-subword-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*Themes
#+BEGIN_SRC elisp
  (use-package ef-themes
    :straight t
    :if window-system
    :ensure t)
  (use-package doom-themes
    :straight t
    :ensure t)
  (load-theme 'ef-duo-light t)
  (add-to-list 'load-path "~/.emacs.d/nano-emacs/")
#+END_SRC

#+BEGIN_SRC elisp
  (add-to-list 'default-frame-alist
	       '(font . "JetBrains Mono-14"))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package hungry-delete
    :straight t
    :ensure t
    :defer t
    :config (global-hungry-delete-mode))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package mood-line
    :straight t
    :ensure t
    :init (mood-line-mode 1))
#+END_SRC

* Vertico
#+BEGIN_SRC elisp
  (use-package vertico
    ;; :commands vertico-mode
    :straight t
    :after minibuffer
    :commands vertico-mode
    :init (vertico-mode 1)
    :config
    (setq vertico-count 10
	  vertico-cycle t
	  vertico-resize t)
    (advice-add #'tmm-add-prompt :after #'minibuffer-hide-completions)
    (advice-add #'ffap-menu-ask :around
		(lambda (&rest args)
		  (cl-letf (((symbol-function #'minibuffer-completion-help)
			     #'ignore))
		    (apply args)))))

  (use-package vertico-repeat
    :after vertico
    :hook (minibuffer-setup . vertico-repeat-save)
    :config
    (use-package savehist
      :defer
      :config
      (add-to-list 'savehist-additional-variables
		   'vertico-repeat-history)))

  (use-package vertico-reverse
    ;; :disabled
    :after vertico)

  (use-package vertico-buffer
    :after vertico
    :config
    (setq vertico-buffer-display-action 'display-buffer-reuse-window))
#+END_SRC

* Marginalia
#+BEGIN_SRC elisp
  (use-package marginalia
    :straight t
    :init (marginalia-mode 1))
#+END_SRC

* Orderless
#+BEGIN_SRC elisp
    ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :straight t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

* Eglot
#+BEGIN_SRC elisp
  (require 'eglot)
  (fset #'jsonrpc--log-event #'ignore)
  (add-hook 'tsx-ts-mode-hook 'eglot-ensure)
;;  (add-hook 'java-ts-mode-hook 'eglot-ensure)
  (set-default 'indent-tabs-mode nil)
  (use-package apheleia
    :straight t)
  (apheleia-global-mode t)
  ;; https://www.leemeichin.com/posts/my-emacs-config.html
  (use-package asdf
    :straight (:type git :host github :repo "tabfugnic/asdf.el"))
  (require 'asdf)
  (asdf-enable)
#+END_SRC 

* Corfu
#+BEGIN_SRC elisp
  (use-package corfu
    :straight t
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))
#+END_SRC

* Typescript
#+BEGIN_SRC elisp
   (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . tsx-ts-mode))
#+END_SRC

* Java
#+BEGIN_SRC elisp
  (add-to-list 'auto-mode-alist '("\\.java?\\'" . java-ts-mode))
#+END_SRC

* Flymake eslint
#+BEGIN_SRC elisp
  (use-package flymake-eslint
    :straight t)
  (add-hook 'tsx-ts-mode-hook ; or whatever the mode-hook is for your mode of choice
  (lambda ()
    (flymake-eslint-enable)))
#+END_SRC

* Treesitter
#+BEGIN_SRC elisp
  (use-package treesit
  :ensure nil
  :custom
  (treesit-font-lock-level 4))
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (ansi-color-apply-on-region compilation-filter-start (point-max)))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

* Dape
#+BEGIN_SRC elisp
    ;;  (use-package dape
      ;;  :straight t)

    ;;(add-to-list 'load-path "~/.emacs.d/dape")
  ;;  (require 'dape)
    (use-package dape
    :straight (dape :type git :host github :repo "svaante/dape"
                        :fork (:host github
                               :repo "MagielBruntink/dape")))
    (require 'eglot)
  (add-hook 'java-ts-mode-hook 'eglot-ensure)
    (add-to-list 'eglot-server-programs
               `((java-mode java-ts-mode) .
                 ("jdtls"
                  :initializationOptions
                  (:bundles ["/home/ap/.emacs.d/jdtls/java-debug/com.microsoft.java.debug.plugin/target/com.microsoft.java.debug.plugin-0.50.0.jar"]))))
#+END_SRC

* Yasnippet
#+BEGIN_SRC elisp
  (use-package yasnippet
    :straight t)
  (yas-global-mode 1)
#+END_SRC

* BreadCrumb
#+BEGIN_SRC elisp
  (use-package breadcrumb
    :straight t
    :init (breadcrumb-mode 1))
#+END_SRC

* Projectile
#+BEGIN_SRC elisp
  (use-package ripgrep
    :straight t)
  (use-package rg
    :straight t)
  (use-package projectile
    :straight t
    :ensure t)
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

* Notmuch
#+BEGIN_SRC elisp
  (use-package notmuch
    :straight t
    :init
    ;; in gmail, messages are trashed by removing the 'inbox' tag, and adding the 'trash' tag. This will move messages to the gmail trash folder, but won't permnanently delete them.
    (defvar +notmuch-delete-tags '("+trash" "-inbox" "-unread" "-new"))
    ;; in gmail, messages are archived simply by removing the 'inbox' tag.
    (setq notmuch-archive-tags '("-inbox" "-new"))
    ;; show new mail first
    :config
    (add-to-list 'notmuch-saved-searches '(:name "new" :query "tag:new" :key "n"))
    (setq notmuch-search-oldest-first nil))
  (require 'notmuch)
  (with-eval-after-load 'notmuch
    (setq notmuch-show-logo nil)
    (setq notmuch-show-all-tags-list t)
    (setq notmuch-search-oldest-first nil))
  ;; https://github.com/patrl/emacs.d/blob/main/readme.org
  ;; Optional: Don't save outgoing mail locally.
  (setq notmuch-fcc-dirs nil)
  (setq message-kill-buffer-on-exit t)
  (setq sendmail-program "gmi")
  (setq send-mail-function 'sendmail-send-it)
  (setq message-sendmail-extra-arguments '("send" "--quiet" "-t" "-C" "~/mail"))
  (setq notmuch-fcc-dirs nil) ;; let gmail take care of sent mail
#+END_SRC

* Dired
#+BEGIN_SRC elisp
  (require 'dired)
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)
  (setq dired-listing-switches
        "-AGFhlv --group-directories-first --time-style=long-iso")
  (setq dired-dwim-target t)
  (setq dired-auto-revert-buffer #'dired-directory-changed-p) ; also see `dired-do-revert-buffer'
  (setq dired-make-directory-clickable t) ; Emacs 29.1
  (setq dired-free-space nil) ; Emacs 29.1
  (setq dired-mouse-drag-files t) ; Emacs 29.1
  (setq dired-guess-shell-alist-user ; those are the suggestions for ! and & in Dired
        '(("\\.\\(png\\|jpe?g\\|tiff\\)" "feh" "xdg-open")
          ("\\.\\(mp[34]\\|m4a\\|ogg\\|flac\\|webm\\|mkv\\)" "mpv" "xdg-open")
          (".*" "xdg-open")))

  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'hl-line-mode)
#+END_SRC
